{"version":3,"sources":["components/nav-bar/NavigationBar.tsx","serviceWorker.ts","index.tsx"],"names":["NavigationBar","props","id","className","href","type","data-toggle","data-target","navBarItems","i","lstLabels","length","push","lstHref","lstFontAwesomeIcons","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4LAKqBA,G,kBAEjB,WAAmBC,GAAa,qEACtBA,I,sEAGO,IAAD,OACZ,OACI,yBAAKC,GAAG,UAAUC,UAAU,2DACxB,uBAAGD,GAAG,QAAQC,UAAU,eAAeC,KAAK,KAA5C,kBAEA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,sBAChF,0BAAMJ,UAAU,yBAGpB,yBAAKA,UAAU,2BAA2BD,GAAG,qBACzC,wBAAIC,UAAU,cACR,WAGE,IAFA,IAAIK,EAAqB,GAEhBC,EAAI,EAAGA,EAAI,EAAKR,MAAMS,UAAUC,OAAQF,IAC7CD,EAAYI,KACR,wBAAIT,UAAU,mDACV,uBAAGA,UAAU,WAAWC,KAAM,EAAKH,MAAMY,QAAQJ,IAAI,uBAAGN,UAAW,EAAKF,MAAMa,oBAAoBL,KAAS,EAAKR,MAAMS,UAAUD,MAI5I,OAAOD,EAVT,U,GAjBiBO,IAAMC,YCO7BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,CACZV,QAAS,CAAC,QAAS,UAAW,aAAc,YAAa,YACzDC,oBAAqB,CAAC,aAAc,cAAe,mBAAoB,eAAgB,eACvFJ,UAAW,CAAC,OAAQ,SAAU,YAAa,WAAY,aAAgBc,SAASC,eAAe,WDkI7F,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b1481d4d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './NavigationBar.css'\r\nimport INavigationBarProps from './INavigationBarProps';\r\nimport INavigationBarState from './INavigationBarState';\r\n\r\nexport default class NavigationBar extends React.Component<INavigationBarProps, INavigationBarState> {\r\n\r\n    public constructor(props: any) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <nav id=\"nav-bar\" className=\"navbar navbar-expand-md fixed-top bg-light navbar-light\">\r\n                <a id=\"brand\" className=\"navbar-brand\" href=\"#\">Idjaz Hossanee</a>\r\n\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsibleNavbar\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"collapsibleNavbar\">\r\n                    <ul className=\"navbar-nav\">\r\n                        {(() => {\r\n                            let navBarItems: any[] = [];\r\n\r\n                            for (let i = 0; i < this.props.lstLabels.length; i++) {\r\n                                navBarItems.push(\r\n                                    <li className=\"nav-item nav-item-hover-background-change-light\">\r\n                                        <a className=\"nav-link\" href={this.props.lstHref[i]}><i className={this.props.lstFontAwesomeIcons[i]}></i>{this.props.lstLabels[i]}</a>\r\n                                    </li>\r\n                                );\r\n                            }\r\n                            return navBarItems;\r\n                        })()}\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport NavigationBar from './components/nav-bar/NavigationBar';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<NavigationBar \n    lstHref={['#home', '#skills', '#education', '#projects', '#contact']}\n    lstFontAwesomeIcons={['fa fa-home', 'fa fa-tools', 'fa fa-university', 'fa fa-laptop', 'fa fa-phone']}\n    lstLabels={['Home', 'Skills', 'Education', 'Projects', 'Contact']} />, document.getElementById('header'));\n\nserviceWorker.unregister();"],"sourceRoot":""}